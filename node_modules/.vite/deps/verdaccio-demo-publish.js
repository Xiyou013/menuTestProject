import {
  __commonJS
} from "./chunk-ZS7NZCD4.js";

// node_modules/verdaccio-demo-publish/src/test.js
var require_test = __commonJS({
  "node_modules/verdaccio-demo-publish/src/test.js"(exports, module) {
    var addFn = (a, b) => {
      console.log("测试npm包中addFn方法");
      return a + b;
    };
    var logFn = (data) => {
      console.log("单纯打印由引用方传过来的数据：", data);
    };
    module.exports.addFn = addFn;
    module.exports.logFn = logFn;
  }
});

// node_modules/verdaccio-demo-publish/src/menu.js
var require_menu = __commonJS({
  "node_modules/verdaccio-demo-publish/src/menu.js"(exports, module) {
    var states = {
      name: "",
      // 用户名称
      // 菜单路由
      dirs: [],
      // 目录级别数组，包含菜单级别数组
      permissions: [],
      // 按钮级别数组
      addRoutes: [],
      // 所拥有权限的异步路由+所有同步路由
      permissionRoutes: []
      // 所拥有权限的异步路由+有权限的同步路由；也就是所拥有有权限的路由
    };
    var hasPermission = (dirs, route) => {
      let tmp = [];
      route.children.forEach((child) => {
        if (child.meta && child.meta.title) {
          const idx = dirs.indexOf(child.meta.sid);
          if (idx === -1) {
            child.hidden = true;
          }
        } else {
          child.hidden = true;
        }
      });
      tmp.push(route);
      return tmp;
    };
    var filterAsyncRoutes = (routes, menuList) => {
      let res = [];
      routes.forEach((route) => {
        if (route.meta && route.meta.title && menuList.indexOf(route.meta.sid) > -1) {
          let tmp = hasPermission(menuList, route);
          res = res.concat(tmp);
        } else {
          if (Array.isArray(route.children)) {
            let single = route.children[0];
            if (single.meta && single.meta.title && menuList.indexOf(single.meta.sid) > -1) {
              route.single = true;
              res.push(route);
            }
          }
        }
      });
      return res;
    };
    var getSetPermissionRoutes = (routes, constantRoutes, menuList) => {
      console.log("44444444444");
      let constantList = [];
      constantRoutes.forEach((item) => {
        if (item.children && item.children.length > 0) {
          let tmp = menuList.filter((val) => val === item.children[0].meta.sid);
          if (tmp.length > 0) {
            constantList.push(item);
          }
        }
        if (item.hidden) {
          constantList.unshift(item);
        }
      });
      states.permissionRoutes = constantList.concat(routes);
      return states.permissionRoutes;
    };
    var formatMenuAndBtn = (roles) => {
      let MenuAndBtn = {
        menuArr: [],
        btnArr: []
      };
      roles.forEach((item) => {
        function transTree(val) {
          val.forEach((it) => {
            if (it.type === 1) {
              MenuAndBtn.menuArr.push(it.sid);
            }
            if (it.type === 2) {
              MenuAndBtn.btnArr.push(it.sid);
            }
            if (it.children) {
              transTree(it.children);
            }
            if (it.buttons) {
              transTree(it.buttons);
            }
          });
        }
        transTree(item.permission);
      });
      return MenuAndBtn;
    };
    module.exports.hasPermission = hasPermission;
    module.exports.filterAsyncRoutes = filterAsyncRoutes;
    module.exports.getSetPermissionRoutes = getSetPermissionRoutes;
    module.exports.formatMenuAndBtn = formatMenuAndBtn;
  }
});

// node_modules/verdaccio-demo-publish/main.js
var require_main = __commonJS({
  "node_modules/verdaccio-demo-publish/main.js"(exports, module) {
    var { addFn, logFn } = require_test();
    var { hasPermission, filterAsyncRoutes, getSetPermissionRoutes, formatMenuAndBtn } = require_menu();
    module.exports = {
      addFn,
      logFn,
      hasPermission,
      filterAsyncRoutes,
      getSetPermissionRoutes,
      formatMenuAndBtn
    };
    console.log("77777888888");
  }
});
export default require_main();
//# sourceMappingURL=verdaccio-demo-publish.js.map
